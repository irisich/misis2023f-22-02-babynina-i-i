МИНИСТЕРСТВО НАУКИ И ВЫСШЕГО ОБРАЗОВАНИЯ РФ 
ФЕДЕРАЛЬНОЕ ГОСУДАРСТВЕННОЕ АВТОНОМНОЕ 
ОБРАЗОВАТЕЛЬНОЕ УЧРЕЖДЕНИЕ ВЫСШЕГО ОБРАЗОВАНИЯ
«НАЦИОНАЛЬНЫЙ ИССЛЕДОВАТЕЛЬСКИЙ ТЕХНОЛОГИЧЕСКИЙ
УНИВЕРСИТЕТ «МИСИС»
Институт информационных технологий и компьютерных наук
Кафедра инженерной кибернетики
 
Курсовая работа
по дисциплине 
«Объектно-ориентированное программирование» на тему
«Библиотека для украшения QR-кодов»
Выполнил:
студент(ка) 1-го курса, гр. БПМ22-2 Бабынина И.И.
Проверил:
доцент, к.т.н. Полевой Д.В.
Москва, 2023
2
Оглавление
Описание задачи............................................................................................... 3
Пользовательское описание ............................................................................ 4
Техническое описание ..................................................................................... 5
Установка и сборка библиотеки...................................................................... 7
Тестирование .................................................................................................... 8
Список использованной литературы............................................................ 11
3
Описание задачи
Необходимо реализовать библиотеку QRBeautify, предназначенную для 
украшения QR-кодов. QRBeautify – библиотека-дополнение базовой 
библиотеки QRgenerator[1], позволяющей создать QR-код. Кроме того, 
используется библиотека PNGwriter, позволяющая работать с изображениями в 
формате png. Проектная библиотека позволяет сгенерировать QR-код и 
персонализировать при помощи командной строки в нем следующие параметры:
1. Изменение цвета кода (согласно цветовой модели RGB) (рис. 1)
Рис. 1. QR-код с измененным цветом
2. Изменение угловых маркеров (квадратные, круглые) (рис.2)
Рис. 2 QR-код с круглыми угловыми маркерами
(квадратные – см. рис. 1)
3. Наложение изображения двумя методами – снизу под изображение (рис. 3) 
и внутрь кода (рис. 4)
4
Рис. 3 QR-код с подложенным под него изображенем
Рис. 4 QR-код со встроенным в него изображением
Сохранение готового QR-кода в формате PNG.
Пользовательское описание
Библиотека QRBeautify предоставляет возможность персонализировать и 
украсить QR-код. С помощью этой библиотеки можно наложить изображение на 
QR-код (или наложить QR-код на изображение), изменить цвет, угловые маркеры. 
Для начала работы с библиотекой, необходимо установить исходники (раздел 
«Установка и сборка библиотеки»), подключить её к вашему проекту (#include
<QRBeautify.h>). Тестовое приложение написано при помощи библиотеки 
argParser (автор – Карнаух М., гр. БПМ-22-2) для упрощенного обращения к 
библиотеке.
Основные шаги для работы с библиотекой:
1. Создание QR-кода производится при помощи QrCode generateQRCode() при 
использовании пространства имен QRBeautifier;
5
2. Сделать заливку QR-кода можно при помощи цифровой модели RGB. Создайте
makeSolidImage(int red, int green, int blue, AnchorShape shape). В 
качестве параметров в скобках передаются три целочисленных значения от 0 до 
255 и параметр shape;
3. Изменить угловые маркеры можно при помощи heatmap(AnchorShape shape);
4. Наложить изображение в код можно при помощи overlayQRWithImage(const 
char* image_path);
5. Наложить код на изображение можно при помощи 
overlayImageWithQR(const char* image_path);
Техническое описание
Основной класс 
#include <QRBeautify.h>
Открытые члены
• QrBeautifier (const char *text)
Пустой умолчательный конструктор 
• void saveImage ()
Функция для сохранения QR-кода. 
• void makeSolidImage (int red, int green, int blue, AnchorShape shape)
Функция для заливки QR-кода. 
• void overlayImageWithQR (const char *image_path)
Функция для наложения поверх изображения. 
• void overlayQRWithImage (const char *image_path)
6
Функция для встраивания картинки в QR-код. 
• void heatmap (AnchorShape shape)
Функция для генерации heatmap QR-кода. 
Подробное описание
Основной класс 
Конструктор(ы)
QrBeautifier::QrBeautifier (const char * text)
Пустой умолчательный конструктор 
Аргументы
in text Текст QR-кода 
Методы
void QrBeautifier::heatmap (AnchorShape shape)
Функция для генерации heatmap QR-кода. 
Аргументы
in shape форма угловых маркеров 
void QrBeautifier::makeSolidImage (int red, int green, int blue, AnchorShape 
shape)
Функция для заливки QR-кода. 
Аргументы
in red красный цвет 0-255 
7
in green зеленый цвет 0-255 
in blue синий цвет 0-255 
in shape форма угловых маркеров 
void QrBeautifier::overlayImageWithQR (const char * image_path)
Функция для наложения поверх изображения. 
Аргументы
in image_path Путь к изображению 
void QrBeautifier::overlayQRWithImage (const char * image_path)
Функция для встраивания картинки в QR-код. 
Аргументы
in image_path Путь к изображению 
void QrBeautifier::saveImage ()
Объявления и описания членов классов находятся в файлах:
QRBeautify.hQRBeautify.cpp
Установка и сборка библиотеки
Файлы и документация расположены по ссылке на репозиторий github [4]. 
Оттуда необходимо клонировать репозиторий командой
Git clone https://github.com/irisich/babynina_i_i_oop.git
В проекте кроме самой библиотеки QRBeautify можно так же обнаружить 
библиотеку QRgenerator, генерирующую QR-код (не устанавливается через 
8
vcpkg), а так же библиотеку argParser (курсовой проект Карнаух М., необходим 
для тестового приложения). Перед установкой проекта необходимо установить 
библиотеку, позволяющую работать с PNG-изображениями. Для этого 
необходимо перейти в папку с расположением vcpkg, открыть командную строку 
и написать команду
vcpkg install pngwriter
После необходимо собрать проект с помощью CMake. Сборка 
осуществляется следующим образом:
1. Перейти в директорию, в которую установлен репозиторий, перейти в 
babynina_i_i. 
2.Открыть командную строку и написать команды
cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=<Ваш путь до 
vcpkg>/scripts/buildsystems/vcpkg.cmake
cmake --build build --config Release
cmake --install ./build --prefix ./QRBeauty
3. Документация будет сгенерирована в папку rtf.
Тестирование
После сборки можно протестировать пример использования библиотеки. Для 
этого необходимо:
1. Перейти в папку babynina_i_i -> bin -> bin.rel и открыть командную строку
2. Для просмотра допустимых команд ввести 
QRBeautify_Test.exe –help
3. Если в QR-коде будет использовано изображение, оно должно 
располагаться в этой же папке в формате png.
4. Для генерации QR кода пишем запрос в формате 
QRBeautify_Test.exe -<аргумент> <значение аргумента> …
9
5. Готовый код будет сохраняться в ту же папку под названием qr.png.
При работе можно использовать удобный ввод параметров. Формат ввода 
можно узнав по команде QRBeautify_Test.exe -- help:
-B, --basic <Integer> [repeated, min args = 3] - Параметры для модели
RGB-модели – три целых числа от 0 до 255, задающих цвет кода
-h, --heatmap <String> - Параметры угловых маркеров – квадратные
(square) и круглые (round)
-i, --image <String> - Название файла картинки, используемый в QRкоде (обязательно в формате png, должны лежать в той же папке Release)
-m, --mode <String> - Способ наложения картинки: картинка под код 
(overlay) или в код (merge)
-s, --shape <String> - Параметр для базового генератора с RGB моделью
-t, --text <String> [repeated, min args = 1] - Передача текста в QRкод
Ниже приведена таблица, в которой можно увидеть примеры обращений в 
командную строку и сгенерированных QR-кодов:
# Запрос в командную строку Сгенерированный QR-код
1 QRBeautify_Test.exe -i ex1.png 
-t 
https://drive.google.com/driv
e/folders/1-
51LXzFKq1fct6_4CZfKlUia9_FXWkX -m overlay -s 
square
10
2 QRBeautify_Test.exe -i ex2.png 
-t 
https://drive.google.com/driv
e/folders/1-
GjsJhUVJ1dUoSgFGqQTq86VR6ERxv
zY?usp=sharing -m merge -s 
square
3 QRBeautify_Test.exe -t 
https://drive.google.com/driv
e/folders/1-
GjsJhUVJ1dUoSgFGqQTq86VR6ERxv
zY?usp=sharing -s round -B 23 
100 200
4 QRBeautify_Test.exe -h round -
t 
https://drive.google.com/driv
e/folders/1-
GjsJhUVJ1dUoSgFGqQTq86VR6ERxv
zY?usp=sharing
11
5 QRBeautify_Test.exe -t 
https://drive.google.com/driv
e/folders/1-
GjsJhUVJ1dUoSgFGqQTq86VR6ERxv
zY?usp=sharing -s square -B 
176 137 5
Список использованной литературы
1. Библиотека для генерации QR-кодов QRgenerator – URL: 
https://github.com/nayuki/QR-Code-generator.git
2. Библиотека для обработки аргументов командной строки argParser – URL: 
https://github.com/marieKarnaukh/karnaukh_m_v.git
3. Библиотека для работы с изображениями в формате PNG – URL: 
https://github.com/pngwriter/pngwriter.git
4. Репозиторий GitHub – URL: https://github.com/irisich/babynina_i_i_oop.git